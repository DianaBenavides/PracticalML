library(AppliedPredictiveModeling)
install.packages(AppliedPredictiveModeling)
install.packages("AppliedPredictiveModeling")
library(AppliedPredictiveModeling)
library(caret)
data(AlzheimerDisease)
head(AlzheimerDisease, 10)
head(AlzheimerDisease)
AlzheimerDisease
a<-data(AlzheimerDisease)
head(a,10)
head(a,30)
summary(AlzheimerDisease)
data(AlzheimerDisease)
AlzheimerDisease
library(AppliedPredictiveModeling)
data(concrete)
library(caret)
set.seed(975)
inTrain = createDataPartition(mixtures$CompressiveStrength, p = 3/4)[[1]]
training = mixtures[ inTrain,]
testing = mixtures[-inTrain,]
head(concrete,5)
concrete2<-cut2(training$Cement,g=3)
?cut
plot(index,CompressiveStrength,col=Cement)
dim(training)
?dim
plot(training$index,training$CompressiveStrength,col=training$Cement)
head(training)
plot(training$CompressiveStrength, main="vs. Cement", col=training$Cement)
plot(training$CompressiveStrength, main="vs. Cement", col=training$Cement)
plot(cement2$CompressiveStrength, main="vs. Cement", col=cement2$Cement)
plot(training$CompressiveStrength, main="vs. Cement")
cement2<-cut2(training,g=3)
cement2<-cut2(training$Cement,g=3)
plot(cement2$CompressiveStrength, main="vs. Cement", col=cement2$Cement)
plot(CompressiveStrength, main="vs. Cement", col=Cement)
class(cement2)
head(cement2,5)
qplot(CompressiveStrength, data=cement2, fill=Cement)
qplot(cement2, CompressiveStrength, data=training, fill=Cement)
library(AppliedPredictiveModeling)
data(concrete)
library(caret)
set.seed(975)
inTrain = createDataPartition(mixtures$CompressiveStrength, p = 3/4)[[1]]
training = mixtures[ inTrain,]
testing = mixtures[-inTrain,]
hist(SuperPlasticizer, data=training)
hist(training$SuperPlasticizer, data=training)
hist(training$SuperPlasticizer)
?hist
a<-training$SuperPlasticizer
hist(a)
a
head(training)
hist(training$Superplasticizer)
hist(log10(training$Superplasticizer))
hist(training$Superplasticizer)
hist(log10(training$Superplasticizer)+1)
unique(training$Superplasticizer)
library(AppliedPredictiveModeling)
library(caret)
data(AlzheimerDisease)
adData = data.frame(diagnosis,predictors)
testIndex = createDataPartition(diagnosis, p = 0.50,list=FALSE)
training = adData[-testIndex,]
testing = adData[testIndex,]
nrow(training)
nrow(testing)
head(training,10)
head(testing,10)
?createDataPartition
adData = data.frame(predictors)
trainIndex = createDataPartition(diagnosis,p=0.5,list=FALSE)
training = adData[trainIndex,]
testing = adData[-trainIndex,]
nrow(training)
nrow(testing)
library(AppliedPredictiveModeling)
data(concrete)
library(caret)
set.seed(975)
inTrain = createDataPartition(mixtures$CompressiveStrength, p = 3/4)[[1]]
training = mixtures[ inTrain,]
testing = mixtures[-inTrain,]
plot(CompressiveStrength)
plot(training$CompressiveStrength)
summary(training)
plot(training$CompressiveStrength, col=cut2(training$Cement))
plot(training$CompressiveStrength, col=cut2(training$FlyAsh))
plot(training$CompressiveStrength, col=cut2(training$Age))
library(AppliedPredictiveModeling)
data(concrete)
library(caret)
set.seed(975)
inTrain = createDataPartition(mixtures$CompressiveStrength, p = 3/4)[[1]]
training = mixtures[ inTrain,]
testing = mixtures[-inTrain,]
hist(training$Superplasticizer)
hist(log10(training$Superplasticizer)+1)
hist(log10(training$Superplasticizer+1)
)
library(caret)
library(AppliedPredictiveModeling)
set.seed(3433)
data(AlzheimerDisease)
adData = data.frame(diagnosis,predictors)
inTrain = createDataPartition(adData$diagnosis, p = 3/4)[[1]]
training = adData[ inTrain,]
testing = adData[-inTrain,]
head(training,2)
names(training)
data<-subset(AlzheimerDisease,select=c(IL_11, IL_13, IL_16, IL_17E, IL_1alpha, IL_3, IL_4, IL_5, IL_6, IL_7, IL_6_Receptor, IL_8))
data<-subset(training,select=c(IL_11, IL_13, IL_16, IL_17E, IL_1alpha, IL_3, IL_4, IL_5, IL_6, IL_7, IL_6_Receptor, IL_8))
library(caret)
library(AppliedPredictiveModeling)
set.seed(3433)
data(AlzheimerDisease)
data<-subset(AlzheimerDisease,select=c(IL_11, IL_13, IL_16, IL_17E, IL_1alpha, IL_3, IL_4, IL_5, IL_6, IL_7, IL_6_Receptor, IL_8))
data<-subset(data(AlzheimerDisease),select=c(IL_11, IL_13, IL_16, IL_17E, IL_1alpha, IL_3, IL_4, IL_5, IL_6, IL_7, IL_6_Receptor, IL_8))
data<-subset(AlzheimerDisease,select=c(IL_11, IL_13, IL_16, IL_17E, IL_1alpha, IL_3, IL_4, IL_5, IL_6, IL_7, IL_6_Receptor, IL_8))
data<-subset(training,select=c(IL_11, IL_13, IL_16, IL_17E, IL_1alpha, IL_3, IL_4, IL_5, IL_6, IL_7, IL_6_Receptor, IL_8))
preProc<-proProcess(log10(data+1), method="pca")
preProc<-preProcess(log10(data+1), method="pca")
preProc
preProc[,1]
preProc<-preProcess(log10(data+1), method="pca", pcaComp=2)
library(stats)
prComp<-prcomp(log10(data+1))
library(caret)
library(AppliedPredictiveModeling)
set.seed(3433)
data(AlzheimerDisease)
adData = data.frame(diagnosis,predictors)
inTrain = createDataPartition(adData$diagnosis, p = 3/4)[[1]]
training = adData[ inTrain,]
testing = adData[-inTrain,]
data<-training[,c(IL_11, IL_13, IL_16, IL_17E, IL_1alpha, IL_3, IL_4, IL_5, IL_6, IL_7, IL_6_Receptor, IL_8)]
data<-training[,c("IL_11", IL_13, IL_16, IL_17E, IL_1alpha, IL_3, IL_4, IL_5, IL_6, IL_7, IL_6_Receptor, IL_8)]
data<-training[,c("IL_11", "IL_13", "IL_16", "IL_17E", "IL_1alpha", "IL_3", "IL_4", "IL_5", "IL_6", "IL_7", "IL_6_Receptor", "IL_8")]
prComp<-prcomp(data)
prComp$rotation
preProc<-preProcess(log10(training[,c("IL_11", IL_13, IL_16, IL_17E, IL_1alpha, IL_3, IL_4, IL_5, IL_6, IL_7, IL_6_Receptor, IL_8)]+1),method="pca", pcaComp=2)
preProc<-preProcess(log10(training[,c("IL_11", "IL_13", "IL_16", "IL_17E", "IL_1alpha", "IL_3", "IL_4", "IL_5", "IL_6", "IL_7", "IL_6_Receptor", "IL_8")]+1),method="pca", pcaComp=2)
preProc<-preProcess(training[,c("IL_11", "IL_13", "IL_16", "IL_17E", "IL_1alpha", "IL_3", "IL_4", "IL_5", "IL_6", "IL_7", "IL_6_Receptor", "IL_8")]),method="pca", pcaComp=2)
prComp<-prcomp(data)
plot(prComp[,1], prComp[,2])
plot(prComp$x[,1], prComp$x[,2])
data<-training[,c("IL_11", "IL_13", "IL_16", "IL_17E", "IL_1alpha", "IL_3", "IL_4", "IL_5", "IL_6", "IL_7", "IL_6_Receptor", "IL_8", "diagnosis")]
modelFit<-train(data$diagnosis, method="glm", preProcess="pca", data=data)
modelFit<-train(data$diagnosis ~ ., method="glm", preProcess="pca", data=data)
update.packages()
y
y
devtools::install_github/('rstudio/shinyapps')
library(devtools)
devtools::install_github/('rstudio/shinyapps')
devtools::install_github('rstudio/shinyapps')
library(shinyapps)
install_github('rstudio/shinyapps')
install_github('ropensci/plotly')
library(ISLR)
library(ggplot2)
library(caret)
#READING DATA
training<-read.csv("pml-training.csv")
testing<-read.csv("pml-testing.csv")
dim(training)
dim(testing)
library(devtools)
install_github('slidify','ramnathv')
install_github('ramnathv/slidify')
devtools::build_github_devtools()
library(devtools)
install_github('ramnathv/slidify')
sessionInfo()
install.packages('devtools')
library(devtools)
install_github('ramnathv/slidify')
libary(devtools)
library(devtools)
install.packages('devtools')
install_github('ramnathv/slidify')
library(devtools)
library(devtools)
install_github('ramnathv/slidify')
install_github('dplyr')
install_packages('slidify-master.tar',repos=NULL)
install.packages('slidify-master.tar',repos=NULL)
install.packages('C:/Users/dk.benavides20/Downloads/slidify-master.tar',repos=NULL)
install.packages('C:/Users/dk.benavides20/Downloads/slidify-master.zip',repos=NULL)
library(slidify)
install.packages('C:/Users/dk.benavides20/Downloads/slidify-master.zip',repos=NULL)
install.packages(file.choose(),repos=NULL)
library(slidify)
install.packages(file.choose(),repos=NULL)
install.packages(file.choose(),repos=NULL)
library(slidify)
library('slidify')
install.packages(file.choose(),repos=NULL)
install.packages(file.choose(),repos=NULL)
library('slidify')
install.packages(file.choose(),repos=NULL)
library('slidify')
library(slidify)
install.packages(file.choose(),repos=NULL)
library(slidify)
install.packages(file.choose(),repos=NULL, type='source')
library(slidify)
require(devtools)
install_github('slidify', 'ramnathv')
require(devtools)
install_github('ramnathv/slidify')
require(devtools)
install_github('hadley/dplyr')
install.packages(dplyr)
install.packages('dplyr')
setwd('C:/DIANA BENAVIDES/Courses/Data Scientist Specialization/Practical ML/CourseProject')
library(ISLR)
library(ggplot2)
library(caret)
library(randomForest)
#READING DATA
training<-read.csv("pml-training.csv")
validation<-read.csv("pml-testing.csv")
counts <- table(training$classe)
barplot(counts,main="Weight Lifting Exercise", names.arg=c("A", "B", "C", "D", "E"), col=c("green", "blue", "yellow", "orange", "red"))
